#!/bin/bash

usb_disk_power_on=/home/mc/xdg-user-dirs/media/job/state/usb_disk/power_on
usb_disk_mount=/home/mc/xdg-user-dirs/media/job/state/usb_disk/mount
mount_sh=/home/mc/xdg-user-dirs/media/bin/mount.sh
realpath=/home/mc/xdg-user-dirs/media/ubin/realpath

function usage() {
cat << EOF
USAGE : $(basename $0) -l OUTPUT_FILE_NAME -z
        $(basename $0) -p USB_ROOT_ID
        $(basename $0) -m USB_ROOT_ID
        $(basename $0) [-f|-d]
        -h print help
        -l output USB_ROOT_ID to specified file
        -m usb disk mount
        -p usb power on
        -z usb power off
        -f flush write cache buffer
        -d print usb device list
EOF
exit 1
}
function do_unmount_partition() {

    device_name=$1
    for partition in $(find /dev -maxdepth 1 -not -name $device_name -name "$device_name*");do

        cmd=$(awk -v pt=$partition '{ if ($1 == pt) printf("fuser -k %s; umount %s;\n", $2, $2) }' /proc/mounts | tac)
        echo $cmd
        eval $cmd

    done
}
function unmount_partition() {

    device_file=$1
    device_file_base=$(basename $device_file)
    array_name=$(grep ' active ' /proc/mdstat | \
        awk -v dev=$device_file_base '{ for (i = 5; i <= NF; i++) if (match($i, dev)) printf("%s", $1) }')

    if [ "$array_name" = "" ];then
        do_unmount_partition $device_file_base
    else
        do_unmount_partition $array_name
        echo mdadm --stop /dev/$array_name
        mdadm --stop /dev/$array_name
        echo mdadm --wait /dev/$array_name
        mdadm --wait /dev/$array_name
    fi
}
function print_usb_device_list() {

    if [ -d /dev/usbhd/ ];then
        for l in $(find /dev/usbhd/ -type l | sort);do
            $realpath $l
        done
    fi

#     for b in "usbhda" "usbhdb" "usbhdc" "usbhdd";do
#         d=/dev/$b
#         if [ -b $d ];then
#             echo $d
#         fi
#     done

}
function wait_for_usb_disk_device() {
    for i in $(seq 30);do
        echo "wait for usb disk device $i"
        count=$(print_usb_device_list | wc -l)
        if [ $count -eq 4 ];then
            echo "wait for usb disk device $i all device found"
            return 0
        fi
        sleep 1
    done

    return 1
}
function flush_disk_cache() {
    echo -e "\nusb disk flush start"
    if [ $# -eq 0 ];then
        device_list=$(print_usb_device_list)
    else
        device_list=$@
    fi

    echo sync
    sync
    for device in $device_list;do
        echo hdparm -F $device
        hdparm -F $device
    done
    sleep 3
    echo -e "usb disk flush end\n"
}
function do_stop() {

    device_file=$1
    device_file_link=$device_file
    if [ -L $device_file ];then
        device_file=$(find $device_file -printf '%h/%l')
    fi

    unmount_partition $device_file

    usb_hub_path=$(udevadm info --query=path --name=$device_file | sed -r -e 's@(/[^/]+){6}$@@')
    if [ ! -e /sys/${usb_hub_path}/power/autosuspend ];then
        echo "ERROR : does not exists /sys/${usb_hub_path}/power/autosuspend"
        return 1
    fi
    if [ ! -e /sys/${usb_hub_path}/power/level ];then
        echo "ERROR : does not exists /sys/${usb_hub_path}/power/level"
        return 1
    fi

    usb_hub_id=$(udevadm info --query=path --name=$device_file | awk -F '/' '{ print $7 }')
    echo $usb_hub_id | egrep -q '[0-9.-]+'
    if [ $? -ne 0 ];then
        echo "ERROR : could not get usb_hub_id : $usb_hub_id"
        return 1
    fi

cat << EOF
device file : $device_file_link -> $device_file
echo 0           > /sys/${usb_hub_path}/power/autosuspend
echo auto        > /sys/${usb_hub_path}/power/level
echo $usb_hub_id > /sys/bus/usb/drivers/usb/unbind
EOF

    echo 0           > /sys/${usb_hub_path}/power/autosuspend
    echo auto        > /sys/${usb_hub_path}/power/level
    echo $usb_hub_id > /sys/bus/usb/drivers/usb/unbind

    return 0
}

################################################################################
################################################################################

control=
output_file=
while getopts 'dfhl:m:p:z' opt;do
    case $opt in
        d)
            print_usb_device_list
            exit
            ;;
        f)
            flush_disk_cache
            exit
            ;;
        h)
            usage
            ;;
        l)
            output_file=$OPTARG
            ;;
        m)
            control=mount
            usb_root=$OPTARG
            ;;
        p)
            control=on
            usb_root=$OPTARG
            ;;
        z)
            control=off
            ;;
    esac
done
shift $(($OPTIND -1))

if [ "$control" = "" ];then
    usage
fi

if [ "$control" = "on" -o "$control" = "mount" ];then

    if [ "$usb_root" = "" ];then
        usage
    fi

    count=$(print_usb_device_list | wc -l)
    if [ $count -eq 0 ];then
        echo "echo $usb_root > /sys/bus/usb/drivers/usb/bind"
        echo $usb_root > /sys/bus/usb/drivers/usb/bind
        wait_for_usb_disk_device
        if [ $? -ne 0 ];then
            echo "ERROR : not found all usb disk device"
            exit
        fi
    fi

    echo "mdadm --assemble --scan"
    mdadm --assemble --scan
    echo "mdadm --wait $(mdadm --detail --scan | awk '{ print $2 }')"
    mdadm --wait $(mdadm --detail --scan | awk '{ print $2 }')

    flush_disk_cache

    touch $usb_disk_power_on
    if [ "$control" = "mount" ];then
        touch $usb_disk_mount
    fi
    bash $mount_sh
    rm -f $usb_disk_power_on $usb_disk_mount

elif [ "$control" = "off" ];then

    rm -f $usb_disk_power_on $usb_disk_mount

    wait_for_usb_disk_device
    if [ $? -ne 0 ];then
        echo "ERROR : not found all usb disk device"
        exit
    fi
    device_list=$(print_usb_device_list)

    for device in $device_list;do
        if [ ! -e $device ];then
            echo "ERROR : DEVICE_FILE does not exist $device"
            exit 1
        fi
        udevadm info --query=path --name=$device
        if [ $? -ne 0 ];then
            echo "ERROR : udevadm command failed $device"
            exit 1
        fi
    done

    usb_root=$(udevadm info --query=path --name=$(echo $device_list | awk '{ print $1 }') | awk -F / '{ print $5 }')
    if [ "$usb_root" = "" ];then
        echo "ERROR : could not found root device"
        exit 1
    fi

    if [ "$output_file" != "" ];then
        if [ ! -e $output_file -o -f $output_file ];then
            echo $usb_root > $output_file
        else
            echo "WARNING : could not output USB_ROOT_ID to $output_file"
        fi
    fi

    flush_disk_cache $device_list

    for device in $device_list;do
        do_stop $device
        if [ $? -ne 0 ];then
            exit 1
        fi
    done

    echo "echo $usb_root > /sys/bus/usb/drivers/usb/unbind"
    echo $usb_root > /sys/bus/usb/drivers/usb/unbind

else
    usage
fi
